
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 14 11:11:16 CEST 2019
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 14 11:11:16 CEST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\056\002\000\002\002" +
    "\004\000\002\003\004\000\002\003\004\000\002\004\005" +
    "\000\002\004\004\000\002\005\013\000\002\005\012\000" +
    "\002\005\010\000\002\006\004\000\002\006\002\000\002" +
    "\006\004\000\002\012\004\000\002\012\003\000\002\013" +
    "\006\000\002\013\005\000\002\014\003\000\002\014\003" +
    "\000\002\007\004\000\002\007\002\000\002\007\004\000" +
    "\002\015\004\000\002\015\003\000\002\016\015\000\002" +
    "\016\005\000\002\010\004\000\002\010\002\000\002\010" +
    "\004\000\002\017\004\000\002\017\003\000\002\020\006" +
    "\000\002\020\005\000\002\021\005\000\002\021\003\000" +
    "\002\022\003\000\002\022\003\000\002\057\002\000\002" +
    "\011\006\000\002\011\002\000\002\023\007\000\002\023" +
    "\005\000\002\023\004\000\002\025\005\000\002\025\002" +
    "\000\002\026\005\000\002\026\003\000\002\026\002\000" +
    "\002\027\005\000\002\027\005\000\002\024\004\000\002" +
    "\024\002\000\002\024\005\000\002\033\003\000\002\033" +
    "\003\000\002\033\005\000\002\033\003\000\002\034\005" +
    "\000\002\034\005\000\002\034\003\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\004\000\002" +
    "\035\003\000\002\030\004\000\002\030\003\000\002\030" +
    "\002\000\002\031\005\000\002\031\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\043\004\000\002\043\005\000\002\042" +
    "\005\000\002\042\005\000\002\044\010\000\002\044\005" +
    "\000\002\044\005\000\002\045\004\000\002\045\002\000" +
    "\002\046\013\000\002\046\012\000\002\046\005\000\002" +
    "\037\003\000\002\037\004\000\002\040\005\000\002\040" +
    "\004\000\002\040\004\000\002\041\005\000\002\041\003" +
    "\000\002\047\006\000\002\047\005\000\002\050\006\000" +
    "\002\050\005\000\002\051\005\000\002\036\003\000\002" +
    "\036\004\000\002\036\004\000\002\052\005\000\002\053" +
    "\003\000\002\053\003\000\002\054\003\000\002\054\003" +
    "\000\002\055\003\000\002\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\012\000\001\002\000\004\002\310\001" +
    "\002\000\004\012\007\001\002\000\004\002\uffff\001\002" +
    "\000\006\003\305\004\306\001\002\000\016\003\013\013" +
    "\ufff6\015\ufff6\021\011\022\ufff6\023\ufff6\001\002\000\006" +
    "\003\272\004\273\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\ufffd\001\002\000\012\013\uffed\015\uffed\022\016" +
    "\023\uffed\001\002\000\010\013\uffe6\015\uffe6\023\044\001" +
    "\002\000\006\003\017\004\020\001\002\000\010\013\uffec" +
    "\015\uffec\023\uffec\001\002\000\006\003\024\045\025\001" +
    "\002\000\012\004\uffea\013\uffea\015\uffea\023\uffea\001\002" +
    "\000\012\004\020\013\uffee\015\uffee\023\uffee\001\002\000" +
    "\012\004\uffeb\013\uffeb\015\uffeb\023\uffeb\001\002\000\004" +
    "\043\043\001\002\000\004\010\026\001\002\000\004\037" +
    "\027\001\002\000\006\004\030\052\032\001\002\000\006" +
    "\040\uff94\041\uff94\001\002\000\004\041\033\001\002\000" +
    "\006\040\uff95\041\uff95\001\002\000\006\004\030\052\032" +
    "\001\002\000\004\040\035\001\002\000\004\011\036\001" +
    "\002\000\006\005\037\006\041\001\002\000\006\036\uff97" +
    "\043\uff97\001\002\000\004\043\042\001\002\000\006\036" +
    "\uff96\043\uff96\001\002\000\012\004\uffe9\013\uffe9\015\uffe9" +
    "\023\uffe9\001\002\000\012\004\uffe8\013\uffe8\015\uffe8\023" +
    "\uffe8\001\002\000\006\003\260\004\243\001\002\000\006" +
    "\013\uffda\015\046\001\002\000\006\003\225\004\226\001" +
    "\002\000\014\013\ufff6\015\ufff6\021\011\022\ufff6\023\ufff6" +
    "\001\002\000\004\013\051\001\002\000\024\003\071\004" +
    "\073\014\uffbe\016\057\024\063\030\075\032\052\033\070" +
    "\034\055\001\002\000\006\003\216\035\215\001\002\000" +
    "\010\014\uffb7\025\uffb7\043\uffb7\001\002\000\004\014\211" +
    "\001\002\000\004\035\207\001\002\000\010\014\uffb4\025" +
    "\uffb4\043\uffb4\001\002\000\020\003\205\004\112\020\110" +
    "\035\105\052\101\053\102\054\103\001\002\000\010\014" +
    "\uffb5\025\uffb5\043\uffb5\001\002\000\006\003\200\051\201" +
    "\001\002\000\010\014\uffbf\025\uffbf\043\176\001\002\000" +
    "\020\003\165\004\112\020\110\035\105\052\101\053\102" +
    "\054\103\001\002\000\010\014\uffbb\025\uffbb\043\uffbb\001" +
    "\002\000\010\014\uffbc\025\uffbc\043\uffbc\001\002\000\010" +
    "\014\uffb9\025\uffb9\043\uffb9\001\002\000\010\014\uffba\025" +
    "\uffba\043\uffba\001\002\000\006\003\160\035\157\001\002" +
    "\000\010\002\ufff8\013\ufff8\015\ufff8\001\002\000\010\014" +
    "\uffb6\025\uffb6\043\uffb6\001\002\000\020\003\uff9b\014\uffa7" +
    "\025\uffa7\035\115\037\114\043\uffa7\051\uff9b\001\002\000" +
    "\010\014\uffb8\025\uffb8\043\uffb8\001\002\000\006\003\076" +
    "\004\077\001\002\000\004\043\155\001\002\000\004\051" +
    "\100\001\002\000\016\004\112\020\110\035\105\052\101" +
    "\053\102\054\103\001\002\000\040\003\uffc6\014\uffc6\017" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\036\uffc6\040\uffc6" +
    "\042\uffc6\043\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\001" +
    "\002\000\040\003\uff93\014\uff93\017\uff93\025\uff93\026\uff93" +
    "\027\uff93\031\uff93\036\uff93\040\uff93\042\uff93\043\uff93\045" +
    "\uff93\046\uff93\047\uff93\050\uff93\001\002\000\040\003\uff92" +
    "\014\uff92\017\uff92\025\uff92\026\uff92\027\uff92\031\uff92\036" +
    "\uff92\040\uff92\042\uff92\043\uff92\045\uff92\046\uff92\047\uff92" +
    "\050\uff92\001\002\000\016\017\133\031\146\045\127\046" +
    "\130\047\131\050\132\001\002\000\016\004\112\020\110" +
    "\035\105\052\101\053\102\054\103\001\002\000\040\003" +
    "\uffc1\014\uffc1\017\uffc1\025\uffc1\026\uffc1\027\uffc1\031\uffc1" +
    "\036\uffc1\040\uffc1\042\uffc1\043\uffc1\045\uffc1\046\uffc1\047" +
    "\uffc1\050\uffc1\001\002\000\040\003\uffcc\014\uffcc\017\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\031\uffcc\036\uffcc\040\uffcc\042" +
    "\uffcc\043\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\001\002" +
    "\000\016\004\112\020\110\035\105\052\101\053\102\054" +
    "\103\001\002\000\040\003\uffc9\014\uffc9\017\uffc9\025\uffc9" +
    "\026\uffc9\027\uffc9\031\uffc9\036\uffc9\040\uffc9\042\uffc9\043" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\001\002\000\044" +
    "\003\uff9b\014\uff9b\017\uff9b\025\uff9b\026\uff9b\027\uff9b\031" +
    "\uff9b\035\115\036\uff9b\037\114\040\uff9b\042\uff9b\043\uff9b" +
    "\045\uff9b\046\uff9b\047\uff9b\050\uff9b\001\002\000\040\003" +
    "\uffcb\014\uffcb\017\uffcb\025\uffcb\026\uffcb\027\uffcb\031\uffcb" +
    "\036\uffcb\040\uffcb\042\uffcb\043\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\001\002\000\016\004\112\020\110\035\105" +
    "\052\101\053\102\054\103\001\002\000\022\003\121\004" +
    "\112\020\110\035\105\036\123\052\101\053\102\054\103" +
    "\001\002\000\042\003\uff9a\014\uff9a\017\uff9a\025\uff9a\026" +
    "\uff9a\027\uff9a\031\uff9a\036\uff9a\040\uff9a\042\uff9a\043\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\001\002\000" +
    "\040\003\uff99\014\uff99\017\uff99\025\uff99\026\uff99\027\uff99" +
    "\031\uff99\036\uff99\040\uff99\042\uff99\043\uff99\045\uff99\046" +
    "\uff99\047\uff99\050\uff99\001\002\000\020\017\133\036\uffa1" +
    "\042\uffa1\045\127\046\130\047\131\050\132\001\002\000" +
    "\042\003\uffa3\014\uffa3\017\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\031\uffa3\036\uffa3\040\uffa3\042\uffa3\043\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\050\uffa3\051\uffa3\001\002\000\006\036\125" +
    "\042\124\001\002\000\042\003\uffa4\014\uffa4\017\uffa4\025" +
    "\uffa4\026\uffa4\027\uffa4\031\uffa4\036\uffa4\040\uffa4\042\uffa4" +
    "\043\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\001" +
    "\002\000\016\004\112\020\110\035\105\052\101\053\102" +
    "\054\103\001\002\000\042\003\uffa5\014\uffa5\017\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\031\uffa5\036\uffa5\040\uffa5\042\uffa5" +
    "\043\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\001" +
    "\002\000\020\017\133\036\uffa2\042\uffa2\045\127\046\130" +
    "\047\131\050\132\001\002\000\016\004\112\020\110\035" +
    "\105\052\101\053\102\054\103\001\002\000\016\004\112" +
    "\020\110\035\105\052\101\053\102\054\103\001\002\000" +
    "\016\004\112\020\110\035\105\052\101\053\102\054\103" +
    "\001\002\000\016\004\112\020\110\035\105\052\101\053" +
    "\102\054\103\001\002\000\016\004\112\020\110\035\105" +
    "\052\101\053\102\054\103\001\002\000\040\003\uffc3\014" +
    "\uffc3\017\uffc3\025\uffc3\026\uffc3\027\uffc3\031\uffc3\036\uffc3" +
    "\040\uffc3\042\uffc3\043\uffc3\045\uffc3\046\uffc3\047\131\050" +
    "\uffc3\001\002\000\034\003\uffc5\014\uffc5\017\133\025\uffc5" +
    "\026\uffc5\027\uffc5\031\uffc5\036\uffc5\040\uffc5\042\uffc5\043" +
    "\uffc5\046\130\047\131\001\002\000\040\003\uffc7\014\uffc7" +
    "\017\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7\036\uffc7\040" +
    "\uffc7\042\uffc7\043\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7" +
    "\001\002\000\040\003\uffc8\014\uffc8\017\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\031\uffc8\036\uffc8\040\uffc8\042\uffc8\043\uffc8" +
    "\045\uffc8\046\uffc8\047\131\050\uffc8\001\002\000\034\003" +
    "\uffc4\014\uffc4\017\133\025\uffc4\026\uffc4\027\uffc4\031\uffc4" +
    "\036\uffc4\040\uffc4\042\uffc4\043\uffc4\046\130\047\131\001" +
    "\002\000\016\017\133\040\142\045\127\046\130\047\131" +
    "\050\132\001\002\000\042\003\uff98\014\uff98\017\uff98\025" +
    "\uff98\026\uff98\027\uff98\031\uff98\036\uff98\040\uff98\042\uff98" +
    "\043\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98\001" +
    "\002\000\040\003\uffc2\014\uffc2\017\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\031\uffc2\036\uffc2\040\uffc2\042\uffc2\043\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\001\002\000\016\017\133" +
    "\036\145\045\127\046\130\047\131\050\132\001\002\000" +
    "\040\003\uffca\014\uffca\017\uffca\025\uffca\026\uffca\027\uffca" +
    "\031\uffca\036\uffca\040\uffca\042\uffca\043\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\001\002\000\016\004\112\020\110" +
    "\035\105\052\101\053\102\054\103\001\002\000\020\003" +
    "\151\017\133\027\150\045\127\046\130\047\131\050\132" +
    "\001\002\000\022\004\073\014\uffbe\016\057\024\063\030" +
    "\075\032\052\033\070\034\055\001\002\000\004\043\152" +
    "\001\002\000\010\014\uffa9\025\uffa9\043\uffa9\001\002\000" +
    "\004\014\154\001\002\000\010\014\uffaa\025\uffaa\043\uffaa" +
    "\001\002\000\010\014\uffa8\025\uffa8\043\uffa8\001\002\000" +
    "\014\003\uff99\014\uffa6\025\uffa6\043\uffa6\051\uff99\001\002" +
    "\000\016\004\112\020\110\035\105\052\101\053\102\054" +
    "\103\001\002\000\004\043\161\001\002\000\010\014\uff9d" +
    "\025\uff9d\043\uff9d\001\002\000\016\017\133\036\163\045" +
    "\127\046\130\047\131\050\132\001\002\000\010\014\uff9e" +
    "\025\uff9e\043\uff9e\001\002\000\020\003\170\017\133\026" +
    "\167\045\127\046\130\047\131\050\132\001\002\000\004" +
    "\043\166\001\002\000\010\014\uffad\025\uffad\043\uffad\001" +
    "\002\000\024\004\073\014\uffbe\016\057\024\063\025\uffbe" +
    "\030\075\032\052\033\070\034\055\001\002\000\010\014" +
    "\uffae\025\uffae\043\uffae\001\002\000\006\014\uffab\025\173" +
    "\001\002\000\004\014\175\001\002\000\022\004\073\014" +
    "\uffbe\016\057\024\063\030\075\032\052\033\070\034\055" +
    "\001\002\000\004\014\uffac\001\002\000\010\014\uffaf\025" +
    "\uffaf\043\uffaf\001\002\000\024\004\073\014\uffc0\016\057" +
    "\024\063\025\uffc0\030\075\032\052\033\070\034\055\001" +
    "\002\000\010\014\uffbd\025\uffbd\043\uffbd\001\002\000\004" +
    "\043\203\001\002\000\016\004\112\020\110\035\105\052" +
    "\101\053\102\054\103\001\002\000\022\014\uffb1\017\133" +
    "\025\uffb1\043\uffb1\045\127\046\130\047\131\050\132\001" +
    "\002\000\010\014\uffb0\025\uffb0\043\uffb0\001\002\000\022" +
    "\014\uffb3\017\133\025\uffb3\043\uffb3\045\127\046\130\047" +
    "\131\050\132\001\002\000\004\043\206\001\002\000\010" +
    "\014\uffb2\025\uffb2\043\uffb2\001\002\000\004\036\210\001" +
    "\002\000\010\014\uff9c\025\uff9c\043\uff9c\001\002\000\006" +
    "\003\212\004\213\001\002\000\010\002\ufff9\013\ufff9\015" +
    "\ufff9\001\002\000\004\043\214\001\002\000\010\002\ufffa" +
    "\013\ufffa\015\ufffa\001\002\000\004\007\220\001\002\000" +
    "\004\043\217\001\002\000\010\014\uff9f\025\uff9f\043\uff9f" +
    "\001\002\000\004\036\221\001\002\000\010\014\uffa0\025" +
    "\uffa0\043\uffa0\001\002\000\006\013\uffdc\015\uffdc\001\002" +
    "\000\006\013\uffda\015\046\001\002\000\004\013\uffdb\001" +
    "\002\000\014\013\uffd7\015\uffd7\021\uffd7\022\uffd7\023\uffd7" +
    "\001\002\000\012\003\227\035\230\043\uffd5\044\uffd5\001" +
    "\002\000\014\013\uffd8\015\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\001\002\000\006\004\243\036\uffd2\001\002\000\006\043" +
    "\uffce\044\233\001\002\000\004\043\237\001\002\000\010" +
    "\003\234\005\037\006\041\001\002\000\004\043\236\001" +
    "\002\000\004\043\uffcf\001\002\000\004\043\uffcd\001\002" +
    "\000\014\013\uffd9\015\uffd9\021\uffd9\022\uffd9\023\uffd9\001" +
    "\002\000\006\003\251\044\252\001\002\000\006\036\uffd3" +
    "\043\247\001\002\000\004\036\246\001\002\000\010\003" +
    "\uffdf\042\244\044\uffdf\001\002\000\004\004\243\001\002" +
    "\000\006\003\uffe0\044\uffe0\001\002\000\006\043\uffd6\044" +
    "\uffd6\001\002\000\006\004\243\036\uffd2\001\002\000\004" +
    "\036\uffd4\001\002\000\004\043\256\001\002\000\010\004" +
    "\254\005\037\006\041\001\002\000\006\036\uffd1\043\uffd1" +
    "\001\002\000\006\036\uffdd\043\uffdd\001\002\000\006\036" +
    "\uffde\043\uffde\001\002\000\006\036\uffd0\043\uffd0\001\002" +
    "\000\006\003\264\044\265\001\002\000\006\013\uffe5\015" +
    "\uffe5\001\002\000\010\004\243\013\uffe7\015\uffe7\001\002" +
    "\000\010\004\uffe3\013\uffe3\015\uffe3\001\002\000\010\004" +
    "\uffe4\013\uffe4\015\uffe4\001\002\000\004\043\270\001\002" +
    "\000\010\004\254\005\037\006\041\001\002\000\004\043" +
    "\267\001\002\000\010\004\uffe2\013\uffe2\015\uffe2\001\002" +
    "\000\010\004\uffe1\013\uffe1\015\uffe1\001\002\000\014\004" +
    "\ufff3\013\ufff3\015\ufff3\022\ufff3\023\ufff3\001\002\000\012" +
    "\013\ufff5\015\ufff5\022\ufff5\023\ufff5\001\002\000\006\003" +
    "\276\045\277\001\002\000\014\004\273\013\ufff7\015\ufff7" +
    "\022\ufff7\023\ufff7\001\002\000\014\004\ufff4\013\ufff4\015" +
    "\ufff4\022\ufff4\023\ufff4\001\002\000\004\043\304\001\002" +
    "\000\010\052\300\053\102\054\103\001\002\000\004\043" +
    "\ufff0\001\002\000\004\043\uffef\001\002\000\004\043\303" +
    "\001\002\000\014\004\ufff2\013\ufff2\015\ufff2\022\ufff2\023" +
    "\ufff2\001\002\000\014\004\ufff1\013\ufff1\015\ufff1\022\ufff1" +
    "\023\ufff1\001\002\000\016\003\ufffb\013\ufffb\015\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\001\002\000\004\043\307\001\002" +
    "\000\016\003\ufffc\013\ufffc\015\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\006\002\003\056\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\011\006\013\001\001\000" +
    "\006\012\273\013\270\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\014\001\001\000\004\010\044\001" +
    "\001\000\006\015\021\016\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\260\020\261\021\256\001\001\000\006\011\047\023\046" +
    "\001\001\000\002\001\001\000\006\005\221\006\013\001" +
    "\001\000\002\001\001\000\032\030\053\031\061\032\064" +
    "\036\060\037\055\042\063\043\073\044\066\046\065\047" +
    "\052\050\071\051\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\033\203\034\106\035\112\036\110\055\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\033\163\034\106\035\112\036\110\055\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\155\052\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\033\103\034\106\035\112\036\110\055" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\033\143\034\106\035" +
    "\112\036\110\055\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\033\142\034\106\035\112\036\110\055" +
    "\105\001\001\000\002\001\001\000\006\040\116\052\115" +
    "\001\001\000\002\001\001\000\014\033\140\034\106\035" +
    "\112\036\110\055\105\001\001\000\016\033\117\034\106" +
    "\035\112\036\110\041\121\055\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\033\125\034" +
    "\106\035\112\036\110\055\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\033\137\034\106\035\112\036" +
    "\110\055\105\001\001\000\014\033\136\034\106\035\112" +
    "\036\110\055\105\001\001\000\014\033\135\034\106\035" +
    "\112\036\110\055\105\001\001\000\014\033\134\034\106" +
    "\035\112\036\110\055\105\001\001\000\014\033\133\034" +
    "\106\035\112\036\110\055\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\033" +
    "\146\034\106\035\112\036\110\055\105\001\001\000\002" +
    "\001\001\000\032\030\152\031\061\032\064\036\060\037" +
    "\055\042\063\043\073\044\066\046\065\047\052\050\071" +
    "\051\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\033\161\034\106\035\112\036\110\055" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\030\170\031\061\032\064" +
    "\036\060\037\055\042\063\043\073\044\066\046\065\047" +
    "\052\050\071\051\057\001\001\000\002\001\001\000\004" +
    "\045\171\001\001\000\002\001\001\000\032\030\173\031" +
    "\061\032\064\036\060\037\055\042\063\043\073\044\066" +
    "\046\065\047\052\050\071\051\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\032\176\036\060\037\055" +
    "\042\063\043\073\044\066\046\065\047\052\050\071\051" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\033\201\034\106\035\112\036\110\055\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\222\001\001\000\006\011\223\023\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\230\001\001" +
    "\000\002\001\001\000\010\021\237\026\241\027\240\001" +
    "\001\000\004\024\231\001\001\000\002\001\001\000\004" +
    "\053\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\237\026\247\027\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\252\053\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\262" +
    "\021\256\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\022\265\053\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\301\055\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // vBooleano ::= FALSE 
            {
              VBooleano RESULT =null;
		
					//Para comprobacion de tipos
					VBooleano val = new VBooleano(scopeManager.searchType("BOOLEAN"));
					
					//Codigo intermedio
					ScopeIF scope = scopeManager.getCurrentScope();
					TemporalFactory tF = new TemporalFactory (scope);
					IntermediateCodeBuilder cb =new IntermediateCodeBuilder (scope);
					TemporalIF temp = tF.create ();
					cb.addQuadruple ("MV", temp, 0);
					val.setTemp (temp);
					val.setIntermediateCode (cb.create ());	
					
					//Propagacion
					RESULT = val; 
				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vBooleano",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // vBooleano ::= TRUE 
            {
              VBooleano RESULT =null;
		
					//Para comprobacion de tipos
					VBooleano val = new VBooleano(scopeManager.searchType("BOOLEAN"));
					
					//Codigo intermedio
					ScopeIF scope = scopeManager.getCurrentScope();
					TemporalFactory tF = new TemporalFactory (scope);
					IntermediateCodeBuilder cb =new IntermediateCodeBuilder (scope);
					TemporalIF temp = tF.create ();
					cb.addQuadruple ("MV", temp, 1);
					val.setTemp (temp);
					val.setIntermediateCode (cb.create ());	
					
					//Propagacion
					RESULT = val; 
				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vBooleano",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // entOid ::= IDENTIFICADOR 
            {
              EntOid RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	String constName = id.getLexema();
					
					//Comprobar que exista el ID
					if (!scopeManager.containsSymbol(constName)){
						semanticErrorManager.semanticFatalError("No esta definido el identificador " + constName);
					} else {
						SymbolIF symbol = scopeManager.searchSymbol(constName);
						//Comprobar que se trate de una constante simbolica numerica.
						if (!(symbol instanceof SymbolConstant) || !(symbol.getType().equals(scopeManager.searchType("INTEGER")))){
							semanticErrorManager.semanticFatalError("El identificador " + constName + " no representa una constante simbolica numerica.");
						} else {
							int value = ((SymbolConstant) symbol).getValue();
							EntOid val =  new EntOid (value);
							RESULT = val;
						}
					}
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entOid",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // entOid ::= ENTERO 
            {
              EntOid RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					EntOid val =  new EntOid (Integer.parseInt(num.getLexema()));
					RESULT = val;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entOid",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // intOBool ::= BOOLEAN 
            {
              IntOBool RESULT =null;
		
					RESULT = new IntOBool(scopeManager.searchType("BOOLEAN"));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intOBool",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // intOBool ::= INTEGER 
            {
              IntOBool RESULT =null;
		
					RESULT = new IntOBool(scopeManager.searchType("INTEGER"));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("intOBool",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // idArray ::= CORCHIZQ expresion CORCHDER 
            {
              IdArray RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token cd = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					//Comprobacion de tipo
					if (!exp.getType().getName().equals("INTEGER")){
						semanticErrorManager.semanticFatalError("Expresion no valida para acceder a un vector en linea:" + cd.getLine());
					}
					
					//Codigo intermedio
					IdArray idArray = new IdArray(exp.getType());
					ScopeIF scope = scopeManager.getCurrentScope();
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);
					TemporalIF temp = exp.getTemp ();
					cb.addQuadruples (exp.getIntermediateCode ());
					idArray.setTemp (temp);
					idArray.setIntermediateCode (cb.create ());
					
					//Propagar el resultado
					RESULT = idArray;
									
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("idArray",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // variables ::= IDENTIFICADOR parFuncion 
            {
              Variables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParFuncion par = (ParFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String fName = id.getLexema();
					Variables variables = null;
					
					 
					//Se comprueba que exista el id.
					if(!scopeManager.containsSymbol(fName)){
						semanticErrorManager.semanticFatalError("El identificador " + fName + " no esta definido. Linea: " + id.getLine());
					} else {
						//Se comprueba que se trate de una funcion
						TypeIF type = scopeManager.searchSymbol(fName).getType();
						if (!(type instanceof TypeFunction)){
							semanticErrorManager.semanticFatalError(fName + " no es una funcion. Linea: " + id.getLine());
						} else {
							//Se comprueba que los parametros son los correctos
							List<TypeIF> usedTypes = par.getParamList();
							List<TypeIF> expectedTypes = ((TypeFunction) type).getParamTypeList();
							
							//Comprobacion del numero de parametros.
							if(usedTypes.size() != expectedTypes.size()){
								semanticErrorManager.semanticFatalError("Numero incorrecto de parametros para invocar " + fName + " . Esperados: " + expectedTypes.size() + ", recibidos: " + usedTypes.size() + ". Linea: " + id.getLine());  
							} else {
								for (int i = 0; i < expectedTypes.size(); i++){
									if(!usedTypes.get(i).equals(expectedTypes.get(i))){
											semanticErrorManager.semanticFatalError("Error en tipo de parametros en la posicion " + (i+1) + ". Esperado: " + expectedTypes.get(i).getName() + ", recibido: " + usedTypes.get(i).getName() + ". Linea: " + id.getLine());
									}
								}
								variables = new Variables(((TypeFunction) type).getReturnType(), false);
							}
						}
					}
					
					//Codigo intermedio
					
					//Propagacion
					RESULT = variables;
					
					
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // variables ::= IDENTIFICADOR idArray 
            {
              Variables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IdArray ia = (IdArray)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String aName = id.getLexema(); 
					Variables variables = null;
					//Se comprueba que exista el id.
					if(!scopeManager.containsSymbol(aName)){
						semanticErrorManager.semanticFatalError("El identificador " + aName + " no esta definido. Linea: " + id.getLine());
					} else {
						//Se comprueba que se trate de un array
						TypeIF type = scopeManager.searchSymbol(aName).getType();
						if (!(type instanceof TypeArray)){
							semanticErrorManager.semanticFatalError(aName + " no es un array. Linea: " + id.getLine());
						} else {
							variables = new Variables(((TypeArray) type).getBaseType(), true);
						}
					}
					
					
					//Codigo intermedio
					ScopeIF scope = scopeManager.getCurrentScope();
					TemporalFactory tf = new TemporalFactory(scope);
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);
					TemporalIF temp = tf.create();
					TemporalIF desp = ia.getTemp ();
					TemporalIF temp1 = tf.create();
					SymbolIF symbol = scopeManager.searchSymbol(aName);
					Variable var = new Variable(aName, symbol.getScope());
					cb.addQuadruples (ia.getIntermediateCode ());
					//Direccion base de la variable
					cb.addQuadruple("MVA",temp1, var);
					cb.addQuadruple("ADD", temp, temp1, desp);
					variables.setTemp (temp);
					variables.setIntermediateCode (cb.create ());
					
					
					//Propagar resultado
					RESULT = variables;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variables ::= IDENTIFICADOR 
            {
              Variables RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String name = id.getLexema();
					Variables variables = null;
					SymbolIF symbol = null;
					TypeIF type = null;
					 
					//Se comprueba que exista el id.
					if(!scopeManager.containsSymbol(name)){
						semanticErrorManager.semanticFatalError("El identificador " + name + " no esta definido. Linea: " + id.getLine());
					} else {
						symbol = scopeManager.searchSymbol(name);
						type = symbol.getType();
						//Se comprueba si es una llamada a una funcion sin parametros.
						if(type instanceof TypeFunction){
							if(((TypeFunction) type).getParamTypeList().isEmpty()){
								variables = new Variables(((TypeFunction) type).getReturnType(), false);
							} else {
								semanticErrorManager.semanticFatalError("Faltan parametros de llamada a la funcion. Linea: " + id.getLine());
							}
						} else {
							//Se comprueba si se trata de una constante para indicar que no se le podría asignar un valor diferente.
							variables = new Variables(type, !(symbol instanceof SymbolConstant));
						}
					}
					
					//Codigo intermedio
					ScopeIF scope = scopeManager.getCurrentScope();
					TemporalFactory tf = new TemporalFactory(scope);
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);
					TemporalIF temp = tf.create();
					
					if (symbol instanceof SymbolConstant){
						//Caso de encontrarse una constante						
						cb.addQuadruple ("MV", temp, (((SymbolConstant) symbol).getValue()));
	  				} else if (type instanceof TypeFunction){
	  					//Enconramos una funcion sin parametros
					} else {
						//Encontramos el id de una variable
						Variable var = new Variable (name, symbol.getScope ());
						cb.addQuadruple ("MVA", temp, var);
						
					}
					
					variables.setTemp (temp);
					variables.setIntermediateCode (cb.create ());
						
					
					//Propagar resultado
					RESULT = variables;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variables",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sWriteLn ::= WRITELN PARENIZQ PARENDER 
            {
              SWriteLn RESULT =null;
		
					SWriteLn wln = new SWriteLn(); 
					//Codigo intermedio
					ScopeIF scope = scopeManager.getCurrentScope();
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);
					cb.addQuadruple ("WRCHAR", '\n');
					wln.setIntermediateCode (cb.create ());
					
					RESULT = wln;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sWriteLn",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sWriteInt ::= WRITEINT error PUNTOYCOMA 
            {
              SWriteInt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sWriteInt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sWriteInt ::= WRITEINT PARENIZQ expresion PARENDER 
            {
              SWriteInt RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(!exp.getType().getName().equals("INTEGER")){
						semanticErrorManager.semanticFatalError("WRITEINT solo se puede usar con expresiones numericas. Linea: " + p.getLine());
					} 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sWriteInt",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sWriteString ::= WRITESTRING error PUNTOYCOMA 
            {
              SWriteString RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sWriteString",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sWriteString ::= WRITESTRING PARENIZQ STRING PARENDER 
            {
              SWriteString RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sWriteString",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parametros ::= expresion 
            {
              Parametros RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	RESULT = new Parametros(exp.getType());
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parametros ::= parametros COMA expresion 
            {
              Parametros RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Parametros p = (Parametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	p.addParamType(exp.getType());
                	
                	//Codigo intermedio
					ScopeIF scope = scopeManager.getCurrentScope();
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder (scope);
					
					cb.addQuadruples (p.getIntermediateCode ());
					cb.addQuadruples (exp.getIntermediateCode ());
					cb.addQuadruple ("PARAM", exp.getTemp ());
                	p.setIntermediateCode (cb.create ());
                	
                	//Propagar el resultado
                	RESULT = p;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parFuncion ::= PARENIZQ error 
            {
              ParFuncion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parFuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parFuncion ::= PARENIZQ PARENDER 
            {
              ParFuncion RESULT =null;
		
                	RESULT = new ParFuncion();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parFuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parFuncion ::= PARENIZQ parametros PARENDER 
            {
              ParFuncion RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Parametros par = (Parametros)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                	RESULT = par;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parFuncion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentProcedure ::= IDENTIFICADOR parFuncion 
            {
              SentProcedure RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParFuncion par = (ParFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String pName = id.getLexema(); 
					//Se comprueba que exista el id.
					if(!scopeManager.containsSymbol(pName)){
						semanticErrorManager.semanticFatalError("El identificador " + pName + " no esta definido. Linea: " + id.getLine());
					} else {
						//Se comprueba que se trate de un procedimiento
						TypeIF type = scopeManager.searchSymbol(pName).getType();
						if (!(type instanceof TypeProcedure) || (type instanceof TypeFunction)){
							semanticErrorManager.semanticFatalError(pName + " no es un procedimiento. Linea: " + id.getLine());
						} else {
							//Se comprueba que los parametros son los correctos
							List<TypeIF> usedTypes = par.getParamList();
							List<TypeIF> expectedTypes = ((TypeProcedure) type).getParamTypeList();
							
							//Comprobacion del numero de parametros.
							if(usedTypes.size() != expectedTypes.size()){
								semanticErrorManager.semanticFatalError("Numero incorrecto de parametros para invocar " + pName + " . Esperados: " + expectedTypes.size() + ", recibidos: " + usedTypes.size() + ". Linea: " + id.getLine());  
							} else {
								for (int i = 0; i < expectedTypes.size(); i++){
									if(!usedTypes.get(i).equals(expectedTypes.get(i))){
											semanticErrorManager.semanticFatalError("Error en tipo de parametros en la posicion " + (i+1) + ". Esperado: " + expectedTypes.get(i).getName() + ", recibido: " + usedTypes.get(i).getName() + ". Linea: " + id.getLine());
									}
								}
							}
						}
					}
					semanticErrorManager.semanticDebug("Llamada al procedimiento " + pName + " detectado.");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentProcedure",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentProcedure ::= IDENTIFICADOR 
            {
              SentProcedure RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					String pName = id.getLexema(); 
					//Se comprueba que exista el id.
					if(!scopeManager.containsSymbol(pName)){
						semanticErrorManager.semanticFatalError("El identificador " + pName + " no esta definido. Linea: " + id.getLine());
					} else {
						//Se comprueba que se trate de una procedimiento
						TypeIF type = scopeManager.searchSymbol(pName).getType();
						if (!(type instanceof TypeProcedure) || (type instanceof TypeFunction)){
							semanticErrorManager.semanticFatalError(pName + " no es un procedimiento. Linea: " + id.getLine());
						} else {
							//Se comprueba que los parametros son los correctos
							List<TypeIF> expectedTypes = ((TypeProcedure) type).getParamTypeList();
							
							//Comprobacion del numero de parametros.
							if(expectedTypes.size() != 0){
								semanticErrorManager.semanticFatalError("Numero incorrecto de parametros para invocar " + pName + " . Se trata de un procedimiento sin parametros. Linea: " + id.getLine());  
							} 
						}
					}
					semanticErrorManager.semanticDebug("Llamada al procedimiento " + pName + " detectado.");
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentProcedure",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentFor ::= FOR error PUNTOYCOMA 
            {
              SentFor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentFor",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentFor ::= FOR IDENTIFICADOR DOSPUNTOSIGUAL expresion TO expresion error PUNTOYCOMA 
            {
              SentFor RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentFor",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentFor ::= FOR IDENTIFICADOR DOSPUNTOSIGUAL expresion TO expresion DO sentencias END 
            {
              SentFor RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					SentFor sf = null;
					SymbolIF newSymbol = null;
					ScopeIF scope = null;
					String vName = id.getLexema();
					
					if(!ex1.getType().equals(scopeManager.searchType("INTEGER")) || !ex2.getType().equals(scopeManager.searchType("INTEGER"))){
						semanticErrorManager.semanticFatalError("Las expresiones que regulan el buble deben ser de tipo numerico. Liena: " + id.getLine());
					} else {
											
						//Crear ambito para el bucle
						scope = scopeManager.openScope("Blucle" + id.getLine());
						semanticErrorManager.semanticDebug("Se ha creado el ambito " + scope.getName() + " de nivel " + scope.getLevel());
						
						//Obtener la tabla de símbolos y de tipos del proc/func
						SymbolTableIF symbolTable = scope.getSymbolTable();
						TypeTableIF typeTable = scope.getTypeTable();
						//Se comprueba que la variable no esta declarada.
						if (symbolTable.containsSymbol(vName) || typeTable.containsType(vName) ){
							semanticErrorManager.semanticFatalError("El identificador " + vName + " ya esta siendo usado. Linea: " + id.getLine());
						} else {
							newSymbol = new SymbolVariable(scope, vName, scopeManager.searchType("INTEGER"));
							symbolTable.addSymbol(newSymbol.getName(), newSymbol);
							semanticErrorManager.semanticDebug("Nueva variable anhadida: " + newSymbol);
						}
					
						if (!s.isConsistent()){
							semanticErrorManager.semanticFatalError("Existen sentencias return que devuelven diferentes tipos de datos dentro del bucle.");
						} else {
							scopeManager.closeScope();
							semanticErrorManager.semanticDebug("Se ha cerrado el ambito " + scope.getName() + " de nivel " + scope.getLevel());
							sf = new SentFor(s.getReturnType());
						}	
						
					}
					
					//Codigo intermedio
					TemporalFactoryIF tf = new TemporalFactory (scope);
					LabelFactoryIF lf = new LabelFactory (scope.getName());
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder (scope);
					
					LabelIF l1 = lf.create ();
					LabelIF l2 = lf.create ();
					TemporalIF temp = tf.create();
					TemporalIF temp1 = ex1.getTemp ();
					TemporalIF temp2 = ex2.getTemp ();
					TemporalIF temp3 = tf.create();
					TemporalIF temp4 = tf.create();
					
					//Inicializar contador
					Variable var = new Variable (vName, newSymbol.getScope ());
					cb.addQuadruples (ex1.getIntermediateCode ());
					cb.addQuadruple ("MVA", temp, var);					
					cb.addQuadruples (ex2.getIntermediateCode ());
					cb.addQuadruple ("INL", l1);
					
					//Comprobacion fin del bucle
					cb.addQuadruple ("STP", temp, temp1);
					cb.addQuadruple ("GR", temp3, temp2, temp1);
					cb.addQuadruple ("BRT", temp3, l2);
					
					//Cuerpo bucle
					cb.addQuadruples (s.getIntermediateCode ());
					
					//Actualizar contador
					cb.addQuadruple ("INC", temp4, temp1);
					cb.addQuadruple ("MV", temp1, temp4);
					cb.addQuadruple ("BR", l1);
					
					cb.addQuadruple ("INL", l2);
					
					sf.setIntermediateCode (cb.create());
					
					//Propagacion
					RESULT=sf;
					      
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentFor",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentElse ::= 
            {
              SentElse RESULT =null;
		
                	RESULT = new SentElse();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentElse",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentElse ::= ELSE sentencias 
            {
              SentElse RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					SentElse se = new SentElse(s.hasAchievableReturn(), s.getReturnType());
					
					//Codigo intermedio
					se.setIntermediateCode (s.getIntermediateCode ());
					
					//Propagacion
					RESULT = se;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentElse",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentIf ::= IF error PUNTOYCOMA 
            {
              SentIf RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentIf ::= IF expresion error 
            {
              SentIf RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentIf ::= IF expresion THEN sentencias sentElse END 
            {
              SentIf RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SentElse se = (SentElse)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					SentIf si = null;
					
                	//Se comprueba  que la primera expresion sea booleana
					if(!(exp.getType().equals(scopeManager.searchType("BOOLEAN")))){
						semanticErrorManager.semanticFatalError("Error en la sentencia de control condicional. No es de tipo booleano, Linea " + i.getLine());
					} else {
						si = new  SentIf (s, se);
						if (!si.isConsistent()){
							semanticErrorManager.semanticFatalError("Existen sentencias return que devuelven diferentes tipos de datos");
						} 
					}
					
					//Codigo intermedio
					ScopeIF scope = scopeManager.getCurrentScope();
					TemporalFactoryIF tf = new TemporalFactory (scope);
					LabelFactoryIF lf = new LabelFactory (scope.getName());
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder (scope);
					
					LabelIF l1 = lf.create ();
					LabelIF l2 = lf.create ();
					TemporalIF expTemp = exp.getTemp ();
										
					cb.addQuadruples (exp.getIntermediateCode ());
					cb.addQuadruple ("BRF", expTemp, l1);
					cb.addQuadruples (s.getIntermediateCode ());
					cb.addQuadruple ("BR", expTemp, l2);
					cb.addQuadruple ("INL", l1);
					cb.addQuadruples (se.getIntermediateCode ());
					cb.addQuadruple ("INL", l1);
					
					si.setIntermediateCode (cb.create());
					
					//Propagacion
					RESULT=si;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentIf",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentAsign ::= variables error PUNTOYCOMA 
            {
              SentAsign RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentAsign",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentAsign ::= variables DOSPUNTOSIGUAL expresion 
            {
              SentAsign RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Variables v = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	SentAsign sa = new SentAsign();
                	
                	//Se comprueba la compatibilidad de tipos y que variable represente  una variale
					if(!(v.getType().equals(exp.getType()))){
						semanticErrorManager.semanticFatalError("Tipos erroneos en la operacion de asignacion. Esperado: " + v.getType().getName() + ", indicado: " + exp.getType().getName() + ". Linea: " + i.getLine());
					} else if (!v.isAsignable()) {
						semanticErrorManager.semanticFatalError("No se puede asignar valor al identificador indicado, no es una varible (Constante/Funcion). Linea: " + i.getLine());
					}
					
					//Codigo intermedio
					ScopeIF scope = scopeManager.getCurrentScope();
					TemporalFactoryIF tf = new TemporalFactory (scope);
					TemporalIF varTemp = v.getTemp ();
					TemporalIF expTemp = exp.getTemp ();
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder (scope);
					cb.addQuadruples (exp.getIntermediateCode ());
					cb.addQuadruples (v.getIntermediateCode ());
					cb.addQuadruple ("STP", varTemp, expTemp);
					sa.setIntermediateCode (cb.create());
					
					//Propagar resultado
					RESULT = sa;
					
					
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentAsign",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentReturn ::= RETURN error PUNTOYCOMA 
            {
              SentReturn RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentReturn",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentReturn ::= RETURN expresion 
            {
              SentReturn RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new SentReturn (exp.getType());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentReturn",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia ::= sentProcedure 
            {
              Sentencia RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentProcedure sp = (SentProcedure)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Sentencia();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia ::= sWriteLn 
            {
              Sentencia RESULT =null;
		int wlnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wlnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SWriteLn wln = (SWriteLn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = wln;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia ::= sWriteInt 
            {
              Sentencia RESULT =null;
		
					RESULT = new Sentencia();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia ::= sWriteString 
            {
              Sentencia RESULT =null;
		
					RESULT = new Sentencia(); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= sentReturn 
            {
              Sentencia RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentReturn sr = (SentReturn)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = sr;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= sentFor 
            {
              Sentencia RESULT =null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentFor sf = (SentFor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = sf;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia ::= sentIf 
            {
              Sentencia RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentIf si = (SentIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = si;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia ::= sentAsign 
            {
              Sentencia RESULT =null;
		
					RESULT = new Sentencia();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // listSentencia ::= sentencia 
            {
              ListSentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	RESULT = new ListSentencia(s);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listSentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // listSentencia ::= listSentencia PUNTOYCOMA sentencia 
            {
              ListSentencia RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListSentencia ls = (ListSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia s = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	ls.addSentencia(s);
                	RESULT = ls;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listSentencia",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencias ::= 
            {
              Sentencias RESULT =null;
		
                	RESULT = new Sentencias();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencias ::= listSentencia 
            {
              Sentencias RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListSentencia ls = (ListSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	RESULT = ls;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencias ::= listSentencia PUNTOYCOMA 
            {
              Sentencias RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListSentencia ls = (ListSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                	RESULT = ls;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exprLogica ::= vBooleano 
            {
              ExprLogica RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VBooleano v = (VBooleano)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	//Propagar
                	RESULT = v;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exprLogica ::= NOT expresion 
            {
              ExprLogica RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion ex = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	ExprLogica exprLogica = new ExprLogica(scopeManager.searchType("BOOLEAN"));
                	ScopeIF scope = scopeManager.getCurrentScope();
                	
                	//Comprobación de tipos.
					if(!ex.getType().getName().equals("BOOLEAN")){
						semanticErrorManager.semanticFatalError("Tipos erroneos en la operacion de negacion. Linea: " + n.getLine());
					}
					
					//Código intermedio.
					TemporalFactory tf = new TemporalFactory(scope);
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);
					TemporalIF temp1 = ex.getTemp ();
					TemporalIF temp = tf.create();
					cb.addQuadruples (ex.getIntermediateCode ());
					cb.addQuadruple ("NOT", temp, temp1);
					exprLogica.setTemp (temp);
					exprLogica.setIntermediateCode (cb.create ());
					
					//Propagar
					RESULT = exprLogica;  
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exprLogica ::= expresion OR expresion 
            {
              ExprLogica RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	ExprLogica exprLogica = new ExprLogica(scopeManager.searchType("BOOLEAN"));
                	ScopeIF scope = scopeManager.getCurrentScope();
                	
                	//Comprobación de tipos.
					if(!(ex1.getType().getName().equals("BOOLEAN") && ex2.getType().getName().equals("BOOLEAN"))){
						semanticErrorManager.semanticFatalError("Tipos erroneos en la operacion OR. Linea: " + o.getLine());
					}
					
					//Código intermedio.
					TemporalFactory tf = new TemporalFactory(scope);
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);
					TemporalIF temp1 = ex1.getTemp ();
					TemporalIF temp2 = ex2.getTemp ();
					TemporalIF temp = tf.create();
					cb.addQuadruples (ex1.getIntermediateCode ());
					cb.addQuadruples (ex2.getIntermediateCode ());
					cb.addQuadruple ("OR", temp, temp1, temp2);
					exprLogica.setTemp (temp);
					exprLogica.setIntermediateCode (cb.create ());
					
					//Propagar
					RESULT = exprLogica; 
					 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exprLogica ::= expresion IGUAL expresion 
            {
              ExprLogica RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ExprLogica exprLogica = new ExprLogica(scopeManager.searchType("BOOLEAN"));
                	ScopeIF scope = scopeManager.getCurrentScope();
                	
                	//Comprobación de tipos.
					if(!(ex1.getType().getName().equals("INTEGER") && ex2.getType().getName().equals("INTEGER"))){
						semanticErrorManager.semanticFatalError("Tipos erroneos en la operacion de comparacion. Linea: " + i.getLine());
					}
					
					//Código intermedio.
					TemporalFactory tf = new TemporalFactory(scope);
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);
					TemporalIF temp1 = ex1.getTemp ();
					TemporalIF temp2 = ex2.getTemp ();
					TemporalIF temp = tf.create();
					cb.addQuadruples (ex1.getIntermediateCode ());
					cb.addQuadruples (ex2.getIntermediateCode ());
					cb.addQuadruple ("EQ", temp, temp1, temp2);
					exprLogica.setTemp (temp);
					exprLogica.setIntermediateCode (cb.create ());
					
					//Propagar
					RESULT = exprLogica; 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exprLogica ::= expresion MAYOR expresion 
            {
              ExprLogica RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	ExprLogica exprLogica = new ExprLogica(scopeManager.searchType("BOOLEAN"));
                	ScopeIF scope = scopeManager.getCurrentScope();
                	
                	//Comprobación de tipos.
					if(!(ex1.getType().getName().equals("INTEGER") && ex2.getType().getName().equals("INTEGER"))){
						semanticErrorManager.semanticFatalError("Tipos erroneos en la operacion de comparacion. Linea: " + m.getLine());
					}
					
					//Código intermedio.
					TemporalFactory tf = new TemporalFactory(scope);
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);
					TemporalIF temp1 = ex1.getTemp ();
					TemporalIF temp2 = ex2.getTemp ();
					TemporalIF temp = tf.create();
					cb.addQuadruples (ex1.getIntermediateCode ());
					cb.addQuadruples (ex2.getIntermediateCode ());
					cb.addQuadruple ("GR", temp, temp1, temp2);
					exprLogica.setTemp (temp);
					exprLogica.setIntermediateCode (cb.create ());
					
					//Propagar
					RESULT = exprLogica; 
					 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprLogica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exprArit ::= ENTERO 
            {
              ExprArit RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token entero = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	
                	ExprArit exprArit = new ExprArit(scopeManager.searchType("INTEGER"));
                	Integer num = Integer.parseInt(entero.getLexema());
                	ScopeIF scope = scopeManager.getCurrentScope();
                	
                	//Comprobacion de tipos no necesaria. Si no es un entero es error sintactico.
                	
                	//Código intermedio
                	TemporalFactory tf = new TemporalFactory(scope);
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);
					TemporalIF temp = tf.create();
					cb.addQuadruple ("MV", temp, num);
					exprArit.setTemp (temp);
					exprArit.setIntermediateCode (cb.create ());
					
					//Propagar
					RESULT = exprArit;
                	
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exprArit ::= expresion PRODUCTO expresion 
            {
              ExprArit RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	ExprArit exprArit = new ExprArit(scopeManager.searchType("INTEGER"));
                	ScopeIF scope = scopeManager.getCurrentScope();
                	
                	//Comprobación de tipos.
					if(!(ex1.getType().getName().equals("INTEGER") && ex2.getType().getName().equals("INTEGER"))){
						semanticErrorManager.semanticFatalError("Tipos erroneos en la operacion de multiplicacion. Linea: " + p.getLine());
					} 
					
					//Código intermedio.
					TemporalFactory tf = new TemporalFactory(scope);
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);
					TemporalIF temp1 = ex1.getTemp();
					TemporalIF temp2 = ex2.getTemp();
					TemporalIF temp = tf.create();
					cb.addQuadruples (ex1.getIntermediateCode());
					cb.addQuadruples (ex2.getIntermediateCode());
					cb.addQuadruple ("MUL", temp, temp1, temp2);
					exprArit.setTemp (temp);
					exprArit.setIntermediateCode (cb.create ());
					
					//Propagar
					RESULT = exprArit;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exprArit ::= expresion MINUS expresion 
            {
              ExprArit RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion ex1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion ex2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ExprArit exprArit = new ExprArit(scopeManager.searchType("INTEGER"));
                	ScopeIF scope = scopeManager.getCurrentScope();
                	
                	//Comprobación de tipos.
					if(!(ex1.getType().getName().equals("INTEGER") && ex2.getType().getName().equals("INTEGER"))){
						semanticErrorManager.semanticFatalError("Tipos erroneos en la operacion de resta. Linea: " + m.getLine());
					} 
					
					//Código intermedio.
					TemporalFactory tf = new TemporalFactory(scope);
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);
					TemporalIF temp1 = ex1.getTemp();
					TemporalIF temp2 = ex2.getTemp();
					TemporalIF temp = tf.create();
					cb.addQuadruples (ex1.getIntermediateCode());
					cb.addQuadruples (ex2.getIntermediateCode ());
					cb.addQuadruple ("SUB", temp, temp1, temp2);
					exprArit.setTemp (temp);
					exprArit.setIntermediateCode (cb.create ());
					
					//Propagar
					RESULT = exprArit; 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprArit",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= variables 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variables v = (Variables)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	Expresion exp = new Expresion(v.getType());
                	
                	//Código intermedio (valor contenido en la direccion de variables).
					ScopeIF scope = scopeManager.getCurrentScope();
					TemporalFactory tf = new TemporalFactory(scope);
					IntermediateCodeBuilder cb = new IntermediateCodeBuilder(scope);
					TemporalIF temp1 = v.getTemp();
					TemporalIF temp = tf.create();
					cb.addQuadruples (v.getIntermediateCode());
					cb.addQuadruple ("MVP", temp, temp1);
					exp.setTemp (temp);
					exp.setIntermediateCode (cb.create ());
                	
                	//Propagamos
                	RESULT = exp;
                	
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= PARENIZQ expresion PARENDER 
            {
              Expresion RESULT =null;
		int xpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion xp = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = xp;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= exprLogica 
            {
              Expresion RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprLogica el = (ExprLogica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = el;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= exprArit 
            {
              Expresion RESULT =null;
		int ealeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprArit ea = (ExprArit)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = ea;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipoRetorno ::= DOSPUNTOS error PUNTOYCOMA 
            {
              TipoRetorno RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRetorno",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tipoRetorno ::= 
            {
              TipoRetorno RESULT =null;
		
					RESULT = new TipoRetorno();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRetorno",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoRetorno ::= DOSPUNTOS intOBool 
            {
              TipoRetorno RESULT =null;
		int rTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntOBool rType = (IntOBool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new TipoRetorno(rType.getType());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRetorno",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // procParam ::= cadIdVar error PUNTOYCOMA 
            {
              ProcParam RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procParam",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // procParam ::= cadIdVar DOSPUNTOS tipoVar 
            {
              ProcParam RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CadIdVar ids = (CadIdVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TipoVar vType = (TipoVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					//Obtenemos el tipo de los parametros.
					TypeIF type = vType.getType();
					
					ProcParam parameters = new ProcParam(); 
					
					//Creamos los objetos simbolo de parametro.
					for (String id: ids.getIdList()){
						SymbolParameter sp = new SymbolParameter(id, vType.getType());
						parameters.addParam(sp);
					}
					
					RESULT = parameters;
					 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procParam",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // procListParam ::= 
            {
              ProcListParam RESULT =null;
		
                	RESULT = new ProcListParam();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procListParam",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // procListParam ::= procParam 
            {
              ProcListParam RESULT =null;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcParam parameters = (ProcParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	ProcListParam plp = new ProcListParam();
                	plp.addParameters(parameters.getParamList());
                	RESULT = plp;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procListParam",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // procListParam ::= procParam PUNTOYCOMA procListParam 
            {
              ProcListParam RESULT =null;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProcParam parameters = (ProcParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcListParam plp = (ProcListParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					plp.addParameters(parameters.getParamList());
					RESULT = plp;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procListParam",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // procParenParam ::= 
            {
              ProcParenParam RESULT =null;
		
					RESULT = new ProcParenParam();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procParenParam",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // procParenParam ::= PARENIZQ procListParam PARENDER 
            {
              ProcParenParam RESULT =null;
		int plpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int plpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcListParam plp = (ProcListParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = new ProcParenParam(plp.getParamList());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procParenParam",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cabProcedure ::= PROCEDURE error 
            {
              CabProcedure RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabProcedure",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cabProcedure ::= PROCEDURE IDENTIFICADOR error 
            {
              CabProcedure RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabProcedure",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cabProcedure ::= PROCEDURE IDENTIFICADOR procParenParam tipoRetorno PUNTOYCOMA 
            {
              CabProcedure RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProcParenParam parameters = (ProcParenParam)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoRetorno tipo = (TipoRetorno)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pycleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pycright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token pyc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					//Obtener el ámbito actual
					ScopeIF scope = scopeManager.getCurrentScope();
					
					//Obtener la tabla de símbolos y de tipos
					SymbolTableIF symbolTable = scope.getSymbolTable();
					TypeTableIF typeTable = scope.getTypeTable();
					
					String fName = id.getLexema();
					//Comprobar que no se usa el id
					if(typeTable.containsType(fName) || symbolTable.containsSymbol(fName)){
						semanticErrorManager.semanticFatalError("El identificador " + id + " ya esta siendo usado. Linea: " + id.getLine()); 
					} else {
												
						//Crear ambito para el procedimiento/funcion.
						ScopeIF fScope = scopeManager.openScope(fName);
						semanticErrorManager.semanticDebug("Se ha creado el ambito " + fScope.getName() + " de nivel " + fScope.getLevel());
						
						//Obtener la tabla de símbolos y de tipos del proc/func
						SymbolTableIF fSymbolTable = fScope.getSymbolTable();
						TypeTableIF fTypeTable = fScope.getTypeTable();
						
						//Introducimos los simbolos en la tabla de simbolos del proc/funcion.
						for (SymbolIF symbol : parameters.getParameters()){
							String pName = symbol.getName();
							
							//Comprobamos que no haya duplicidad de nombres.
							if(fTypeTable.containsType(pName) || fSymbolTable.containsSymbol(pName)){
								semanticErrorManager.semanticFatalError("El identificador " + pName + " ya esta siendo usado. Declaracion de funcion/procedimiento en linea: " + id.getLine()); 
							} else {
								//Añadimos el Scope al símbolo y se incluye en la tabla de símbolos.
								symbol.setScope(fScope);
								fSymbolTable.addSymbol(pName, symbol);
								semanticErrorManager.semanticDebug("Nuevo simbolo registrado para func/proc: " + pName + ". " + symbol);
								
							}
						}
						
						//Se crea el símbolo y el tipo para la funcion/procedimiento
						
						TypeIF returnType = tipo.getType();
						
						if (returnType == null){
							TypeProcedure newType = new TypeProcedure(scope, fName);
							newType.addParameters (parameters.getTypeList());
							SymbolProcedure newSymbol =  new SymbolProcedure(scope, fName, newType); 
							typeTable.addType(fName, newType);
							symbolTable.addSymbol(fName, newSymbol);
							semanticErrorManager.semanticDebug("Nuevo procedimiento registrado en la tabla de tipos: " + fName + ". " + newType);
							RESULT = new CabProcedure(fName);
						} else {
							TypeFunction newType = new TypeFunction(scope, fName);
							newType.addParameters(parameters.getTypeList());
							newType.setReturnType(returnType);
							SymbolFunction newSymbol =  new SymbolFunction(scope, fName, newType);
							typeTable.addType(fName, newType);
							symbolTable.addSymbol(fName, newSymbol);
							semanticErrorManager.semanticDebug("Nueva funcion registrado en la tabla de tipos: " + fName + ". " + newType);
							RESULT = new CabProcedure(returnType, fName, pyc.getLine());
						}
						
						
					}
		
								
							
				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabProcedure",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmSubprogram ::= 
            {
              StmSubprogram RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmSubprogram",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmSubprogram ::= cabProcedure cuerpo NT$1 stmSubprogram 
            {
              StmSubprogram RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (StmSubprogram) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CabProcedure cab = (CabProcedure)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmSubprogram",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$1 ::= 
            {
              StmSubprogram RESULT =null;
		int cableft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cabright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CabProcedure cab = (CabProcedure)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                    	//Comprobar que el cuerpo tiene una sentencia return y los tipos coinciden
                    	if(!cab.sameReturnType(c.getReturnType())){
                    		if (cab.getReturnType() == null){
	                    		semanticErrorManager.semanticFatalError("Se ha encontrado sentencia return en el procedimiento " + cab.getId());
                    		} else if (c.getReturnType() == null){
                    			semanticErrorManager.semanticFatalError("No hay sentencia return en la funcion " + cab.getId());
                    		} else {
                    			semanticErrorManager.semanticFatalError("El tipo retorno de la funcion " + cab.getId() + " no coincide con el declarado en linea " + cab.getLine() +". Esperado: " + cab.getReturnType().getName() + ", encontrado: " +  c.getReturnType().getName() );
							}
						}
												 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipoVar ::= IDENTIFICADOR 
            {
              TipoVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	String typeId = id.getLexema();
                	if (!scopeManager.containsType(typeId)){
                		semanticErrorManager.semanticFatalError("El tipo de dato indicado no existe: " + typeId + ". Linea: " + id.getLine());
                	} else {
                		TypeIF type = scopeManager.searchType(typeId);
                		TipoVar  typeVar = new TipoVar (type);
                		RESULT = typeVar;
                	}
                	
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipoVar ::= intOBool 
            {
              TipoVar RESULT =null;
		int iobleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iobright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IntOBool iob = (IntOBool)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new TipoVar(iob.getType());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cadIdVar ::= IDENTIFICADOR 
            {
              CadIdVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                CadIdVar ids = new CadIdVar();
	                ids.addIdToList(id.getLexema());
	                RESULT = ids;
	            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadIdVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cadIdVar ::= IDENTIFICADOR COMA cadIdVar 
            {
              CadIdVar RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CadIdVar ids = (CadIdVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	                ids.addIdToList(id.getLexema());
	                RESULT = ids;
	            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadIdVar",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expVar ::= cadIdVar error PUNTOYCOMA 
            {
              ExpVar RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expVar",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expVar ::= cadIdVar DOSPUNTOS tipoVar PUNTOYCOMA 
            {
              ExpVar RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CadIdVar ids = (CadIdVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoVar varType = (TipoVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token pc = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					//Obtener el ámbito actual
					ScopeIF scope = scopeManager.getCurrentScope();
					
					//Obtener la tabla de símbolos y de tipos
					SymbolTableIF symbolTable = scope.getSymbolTable();
					TypeTableIF typeTable = scope.getTypeTable();
					
					//Obtenemos la lista de ids e iteramos sobre ella para introducir en la tabla de símbolos.				
					Iterator<String> it = ids.getIdList().iterator();
					TypeIF type = varType.getType();
					while (it.hasNext()){
						String id = it.next();
						//Se comprueba que la variable no esta declarada.
						if (symbolTable.containsSymbol(id) || typeTable.containsType(id) ){
							semanticErrorManager.semanticFatalError("El identificador " + id + " ya esta siendo usado. Linea: " + pc.getLine());
						} else {
							SymbolIF newSymbol = new SymbolVariable(scope, id, type);
							symbolTable.addSymbol(newSymbol.getName(), newSymbol);
							semanticErrorManager.semanticDebug("Nueva variable anhadida: " + newSymbol);
						}
					}					
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expVar",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentVar ::= expVar 
            {
              SentVar RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentVar ::= sentVar expVar 
            {
              SentVar RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentVar",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmVar ::= VAR error 
            {
              StmVar RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmVar ::= 
            {
              StmVar RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmVar ::= VAR sentVar 
            {
              StmVar RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expTipo ::= IDENTIFICADOR error PUNTOYCOMA 
            {
              ExpTipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expTipo ::= IDENTIFICADOR IGUAL ARRAY CORCHIZQ entOid PUNTOPUNTO entOid CORCHDER OF intOBool PUNTOYCOMA 
            {
              ExpTipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int valInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EntOid valInit = (EntOid)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valEndleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valEndright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		EntOid valEnd = (EntOid)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IntOBool type = (IntOBool)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					//Obtener el ámbito actual
					ScopeIF scope = scopeManager.getCurrentScope();
					
					//Obtener la tabla de símbolos y de tipos
					SymbolTableIF symbolTable = scope.getSymbolTable();
					TypeTableIF typeTable = scope.getTypeTable();
					String typeName = id.getLexema();
					
					//Comprobar si ya existe ese nombre en la tabla de simbolos o de tipos
					if(symbolTable.containsSymbol(typeName) || scopeManager.containsType(typeName)){
						//Ya existe
						semanticErrorManager.semanticFatalError("Error semantico en la linea " + id.getLine() + ", el identificador " + typeName + " ya se esta usando.");
					
					//Comprobar que el rango del vector es correcto. 					
					} else {
						int init = valInit.getValue();
						int end = valEnd.getValue();
						if (end < init) {
							semanticErrorManager.semanticFatalError("Error semantico. El valor inicial del rango del vector (" + init + ") debe ser menor o igual al final (" + end + ")");						
						} else {
							//Declaracion , lo introducimos en la tabla de tipos.
							TypeIF baseType = type.getType();
							TypeIF typeArray = new TypeArray(scope, typeName, baseType, init, end);	 
							typeTable.addType(typeArray);
							semanticErrorManager.semanticDebug("Nuevo tipo anhadido: " + typeArray);
						}
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentTipo ::= expTipo 
            {
              SentTipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentTipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentTipo ::= sentTipo expTipo 
            {
              SentTipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentTipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmTipos ::= TYPE error 
            {
              StmTipos RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmTipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmTipos ::= 
            {
              StmTipos RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmTipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmTipos ::= TYPE sentTipo 
            {
              StmTipos RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmTipos",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valorConst ::= vBooleano 
            {
              ValorConst RESULT =null;
		int boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VBooleano bool = (VBooleano)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                	//Pdt arreglar
                	ValorConst val = new ValorConst(bool.getType(), 0);
					RESULT = val; 
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConst",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valorConst ::= ENTERO 
            {
              ValorConst RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					ValorConst val = new ValorConst(scopeManager.searchType("INTEGER"), Integer.parseInt(num.getLexema()));
					RESULT = val; 
				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorConst",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expConst ::= IDENTIFICADOR error PUNTOYCOMA 
            {
              ExpConst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expConst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expConst ::= IDENTIFICADOR IGUAL valorConst PUNTOYCOMA 
            {
              ExpConst RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ValorConst val = (ValorConst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					//Obtener el ámbito actual
					ScopeIF scope = scopeManager.getCurrentScope();
					
					//Obtener la tabla de símbolos y de tipos
					SymbolTableIF symbolTable = scope.getSymbolTable();
					TypeTableIF typeTable = scope.getTypeTable();
					String constName = id.getLexema();
					
					//Comprobar si ya existe ese nombre en la tabla de simbolos o de simbolos
					if(symbolTable.containsSymbol(constName)|| typeTable.containsType(constName)){
						//Ya existe
						semanticErrorManager.semanticFatalError("Error semantico en la linea " + id.getLine() + ", el identificador " + constName + " ya se esta usando.");
					} else {
						//No existe, lo introducimos en la tabla de símbolos.
						SymbolConstant symConst = new SymbolConstant(scope, constName, val.getType(), val.getValue());	 
						symbolTable.addSymbol(symConst.getName(), symConst);
						semanticErrorManager.semanticDebug("Nuevo simbolo en la tabla: " + symConst);
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expConst",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentConst ::= expConst 
            {
              SentConst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentConst",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentConst ::= sentConst expConst 
            {
              SentConst RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentConst",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmConstantes ::= CONST error 
            {
              StmConstantes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmConstantes ::= 
            {
              StmConstantes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmConstantes ::= CONST sentConst 
            {
              StmConstantes RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= stmConstantes stmTipos stmVar stmSubprogram BEGIN error 
            {
              Cuerpo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= stmConstantes stmTipos stmVar stmSubprogram BEGIN sentencias END error 
            {
              Cuerpo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= stmConstantes stmTipos stmVar stmSubprogram BEGIN sentencias END IDENTIFICADOR PUNTOYCOMA 
            {
              Cuerpo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sentencias s = (Sentencias)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					//Comprobación de que exista una sentencia return alcanzable en caso de que se trate del cuerpo de una funcion.
					Cuerpo c =  new Cuerpo();
					//Vemos si las sentencias tienen algún tipo de retorno.
					TypeIF returnType = s.getReturnType();
					//Comprobar que solo haya un return si es una funcion.
					if(!(scopeManager.searchType(id.getLexema()) instanceof TypeFunction) &&  returnType != null){
						semanticErrorManager.semanticFatalError("Hay una sentencia return fuera del ambito de una funcion: " + id.getLexema());
					} else if( returnType != null){
						if (!s.hasAchievableReturn()){
							semanticErrorManager.semanticFatalError("No existe una sentencia RETURN siempre alcanzable entre las lineas " + b.getLine() + " y " + e.getLine());
						} else {
							c.setReturnType(returnType);
						}
					}
					ScopeIF scope = scopeManager.getCurrentScope();
					scopeManager.closeScope();
					semanticErrorManager.semanticDebug("Se ha cerrado el ambito " + scope.getName() + " de nivel " + scope.getLevel());
					RESULT = c;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cabModule ::= MODULE error 
            {
              CabModule RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabModule",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cabModule ::= MODULE IDENTIFICADOR PUNTOYCOMA 
            {
              CabModule RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				 	//Se crea el ambito global
				 	String nombre = id.getLexema();
				 	scopeManager.openScope(nombre);
				 	ScopeIF scope = scopeManager.getCurrentScope();
				 	semanticErrorManager.semanticDebug("Se ha creado el ambito " + scope.getName() + " de nivel " + scope.getLevel());
				 	
				 	//Se recupera la tabla de símbolos
				 	TypeTableIF typeTable = scope.getTypeTable();
				 	
				 	//Se crean los tipos primitivos entero y booleano
				 	TypeSimple tEntero = new TypeSimple(scope, "INTEGER");
				 	TypeSimple tBooleano = new TypeSimple(scope, "BOOLEAN");
				 	
				 	//Se introducen los tipos primitivos en la tabla
				 	typeTable.addType(tEntero.getName(), tEntero);
				 	typeTable.addType(tBooleano.getName(), tBooleano);
				 	semanticErrorManager.semanticDebug("Se han anhadido tipos primitivos");
				 
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cabModule",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= cabModule error 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= cabModule cuerpo 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Program RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Program) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		int gAdress = 0;
  		int lOffset = 0;
  		List<ScopeIF> scopes = scopeManager.getAllScopes ();
  		for (ScopeIf scope: scopes) {
  			List<SymbolIF> symbols = scope.getSymbolTable ().getSymbols();
  			for (SymbolIF s: symbols) {
  				if (s instanceof SymbolVariable) {
  					if (scope.getLevel () == 0){
  						s.setAddress (gAddress + s.getType ().getSize ());
  					} else {
  						s.setAddress (lOffset + s.getType ().getSize ());
  					}
  				}
  			}
  		}
  		List<TemporalIF> tempotals = scope.getTemporallTable ().getTemporals();
  		for (TemporalIF t: temporals){
  			t.setAddress (lOffset + t.getsize ());
  		}
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Program RESULT =null;
 syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
	
	
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

